openapi: 3.0.3
info:
  title: WasaText
  description: | 
    This is the yaml documentation for the WasaText Api
  version: 1.0.0
paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in the user
      description: >
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: string
                    example: "12345"
  /conversations:
    get:
      tags:
        - conversations
      summary: Get all the users's conversations 
      description: >
        Get all the user conversations in a list.
      operationId: getMyConversations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
    post:
      tags:
        - conversations
      summary: Start a new private conversation (1:1)
      description: >
        Starts a new conversation with another user and returns the id of the conversation.
      operationId: createPrivateConversation
      security:
        - bearerAuth: []
      requestBody:
        description: Conversation details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                username:
                  type: string
                  example: "hanniPham"
      responses:
        '200':
          description: Existing conversation found
          content:
            application/json:
              schema:
                type: object
                properties:
                  convId:
                    type: string
                    example: "1"
        '201':
          description: New conversation created
          content:
            application/json:
              schema:
                type: object
                properties:
                  convId:
                    type: string
                    example: "1"
        '400':
          description: Invalid request
        '404':
          description: User not found
  /conversations/{convId}:
    get:
      tags:
        - conversations
      summary: Get a specific conversation
      description: > 
        Once given an ID, it returns a specific conversation
      operationId: getConversation
      security:
        - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/convId'
      responses:
        '200':
          description: Details of the conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          description: Conversation not found
    delete:
      tags:
        - conversations
      summary: Delete a conversation
      operationId: deleteConversation
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/convId'
      responses:
        '204':
          description: Conversation deleted successfully
        '404':
          description: Conversation not found
        '403':
          description: Forbidden
  /conversations/{convId}/messages:
    get:
      tags:
        - conversations
      summary: Get all messages from a conversation
      description: >
        Retrieve all messages from a conversation, ordered by timestamp (oldest first).
        Messages include the sender, timestamp, and reactions (if any).
      operationId: getMessagesFromConversation
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/convId'
      responses:
        '200':
          description: Messages loaded successfully
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'
        '400':
          description: Invalid request (e.g., invalid conversation ID)
        '401':
          description: Unauthorized (user not logged in)
        '403':
          description: Forbidden (user is not a member of the conversation)
        '404':
          description: Conversation not found
        '500':
          description: Internal server error
  /messages:
    post:
      tags:
        - messages
      summary: Send a message
      description: > 
        Send a message on an existing conversation
      operationId: sendMessage
      security:
        - bearerAuth: []
      requestBody:
        description: Message details to send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid request
        '404':
          description: Conversation not found 
  /messages/{messageId}:
    delete:
      tags:
        - messages
      summary: Delete a sent message
      operationId: deleteMessage
      security:
        - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/messageId'
      responses:
        '204':
          description: Message deleted successfully
    post:
      tags:
        - messages
      summary: Forward a message to another conversation
      operationId: forwardMessage
      security:
        - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/messageId'
      requestBody:
        description: Message forwarding details
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The ID of the conversation to forward the message to
              example: "12345"
      responses:
        '201':
          description: Message forwarded successfully
  /messages/{messageId}/comment:
    post:
      tags:
        - messages
      summary: Add a comment to a message
      operationId: commentMessage
      security:
        - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/messageId'
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added successfully
  /messages/{messageId}/uncomment:
    delete:
      tags:
        - messages
      summary: Remove a comment from a message
      operationId: uncommentMessage
      security:
        - bearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          description: The ID of the message to uncomment
          schema:
            type: string
      responses:
        '204':
          description: Comment removed successfully
  
  /groups:
    post:
      tags:
        - groups
      summary: Create a new group
      description: Creates a new group with the specified members.
      operationId: createGroup
      security:
        - bearerAuth: []
      requestBody:
        description: Group details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  convId:
                    type: string
                    example: "1"
        '400':
          description: Invalid request
  /groups/{groupId}/name:
    patch:
      tags:
        - groups
      summary: Change the group's name
      operationId: setGroupName
      security:
        - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/groupId'
      requestBody:
        description: New group name
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "New Study Group"
      responses:
        '200':
          description: Group name updated successfully
        '404':
          description: Group not found
  /groups/{groupId}/add:
    post:
      parameters:
      - $ref: '#/components/parameters/groupId'
      tags:
        - groups
      summary: Add a user to a group
      operationId: addToGroup
      security:
        - bearerAuth: []
      requestBody:
        description: User ID to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "12345"
      responses:
        '200':
          description: User added to group
  /groups/{groupId}/leave:
    post:
      tags:
        - groups
      summary: Leave a group
      operationId: leaveGroup
      security:
        - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          description: User left the group successfully
        '404':
          description: Group not found
  /groups/{groupId}/photo:
    patch:
      tags:
        - groups
      summary: Update group photo
      operationId: setGroupPhoto
      security:
        - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/groupId'
      requestBody:
        description: New group photo 
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Group photo updated successfully
        '404':
          description: Group not found
  /users/username:
    patch:
      tags: 
        - users
      summary: Update the logged in user's username
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        description: New username to set
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNameUpdate'
      responses:
        '200':
          description: Username updated successfully
  /users/photo:
    patch:
      tags:
        - users
      summary: Update user profile photo
      operationId: setMyPhoto
      security:
        - bearerAuth: []
      requestBody:
        description: New profile photo
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile photo updated successfully
        '400':
          description: Invalid photo

                
    
components:
  parameters:
    messageId:
      schema:
        type: string
      name: messageId
      in: path
      required: true
      description: The ID of the message
      allowEmptyValue: false
    groupId:
      schema:
        type: string
      name: groupId
      in: path
      required: true
      description: The ID of the group
      allowEmptyValue: false
    convId:
      schema:
        type: string
      name: convId
      in: path
      required: true
      description: The conversation ID
      allowEmptyValue: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    NewGroup:
      type: object
      properties:
        name:
          type: string
          example: "Group Example"
        members:
          type: array
          items:
            type: string
            example: "hanni"
      required:
        - name
        - members
    NewMessage:
      type: object
      properties:
        ConvId:
          type: string
          example: "12345"
        content:
          type: string
          example: "Hey how r u?"
      required:
        - conversationId
        - content
    User:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name: 
          type: string
          example: "Giorgio"
        pro_pic:
          type: string
          format: binary
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
    Message:
      type: object
      properties:
        id:
          type: string
          example: "12041"
        senderId:
          type: string
          example: "12345"
        content:
          type: string
          example: "Hello! today is the 1st of the month"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-03T10:15:30Z"
        status:
          type: string
          enum:
          - sent
          - received
          - read
        reactions:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                example: "1"
              Reaction:
                type: string
                example: "xD"
    Conversation:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: "username1"
        type:
          type: string
          enum:
            - private
            - group
          example: "group"
        creatorId:
          type: string
          example: "1234567"
        photo:
          type: string
          format: binary
          nullable: true
        lastMessage:
          type: string
          example: "Hello! today is the 1st of the month"
          nullable: true
      required:
        - id
        - type
    Comment:
      type: object
      properties:
        emoji:
          type: string
          description: The emoji used as a reaction
          example: "👍"
      required:
        - emoji
    UserNameUpdate:
      type: object
      properties:
        newName:
          type: string
          description: The new username to set
          example: "JohnDoe"
      required:
        - newName